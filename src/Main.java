public class Main {
    /**
     * Задача 1
     * Реализуйте метод, который получает в качестве параметра год, а затем проверяет, является ли он високосным,
     * и выводит результат в консоль.
     * Эту проверку вы уже реализовывали в задании по условным операторам.*
     * Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
     * Результат программы выведите в консоль. Если год високосный, то должно быть выведено “*номер года —* високосный год”.
     * Если год не високосный, то, соответственно: “*номер года —* не **високосный год”.
     * <p>
     * <p>
     * Задача 2
     * Напишите метод, куда подаются два параметра: тип операционной системы (ОС)
     * ( 0 — iOS или 1 — Android) и год выпуска устройства.
     * Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
     * В результате программа должна выводить в консоль в зависимости от исходных данных, какую версию приложения (обычную или lite)
     * и для какой ОС (Android или iOS) нужно установить пользователю.
     * <p>
     * Задача 3
     * Вернемся к делам банковским. У нас хороший банк, поэтому для наших клиентов мы организуем доставку банковских карт
     * на дом с четкой датой доставки. Чтобы известить клиента о том, когда будет доставлена его карта, нам нужно знать расстояние
     * от нашего офиса до адреса доставки.
     * Правила доставки такие:
     * Доставка в пределах 20 км занимает сутки.
     * Доставка в пределах от 20 км до 60 км добавляет еще один день доставки.
     * Доставка в пределах 60 км до 100 км добавляет еще одни сутки.
     * То есть с каждым следующим интервалом доставки срок увеличивается на 1 день.
     * Напишите программу, которая выдает сообщение в консоль:
     * "Потребуется дней: " + срок доставки
     * Объявите целочисленную переменную deliveryDistance = 95, которая содержит дистанцию до клиента.
     * Наша задача — доработать код, а именно написать метод, который на вход принимает дистанцию и возвращает итоговое
     * количество дней доставки.
     */

    //task 1
    public static boolean calculationLeapYear(int year) {
        boolean isLeapYear = ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0));
        return isLeapYear;
    }
    // task 2
    public static void selectApplicationVersion(int clientOS, int clientDeviceYear) {
        if (clientOS == 1 && clientDeviceYear >= 2015) {
            System.out.println("Установите версию приложения для Android по ссылке");
        } else if (clientOS == 1 && clientDeviceYear < 2015) {
            System.out.println("Установите облегченную версию приложения для Android по ссылке");
        } else if (clientOS == 0 && clientDeviceYear >= 2015) {
            System.out.println("Установите версию приложения для iOS по ссылке");
        } else if (clientOS == 0 && clientDeviceYear < 2015) {
            System.out.println("Установите облегченную версию приложения для iOS по ссылке");
        }
    }
    //task 3
    static int calculateDeliveryTime(int km) {
        int deliveryDays = 1;
        if (km > 20) {
            deliveryDays++;
        }
        if (km > 60) {
            deliveryDays++;
        }
        return deliveryDays;
    }

    public static void main(String[] args) {
        //task 1
        int year = 2022;

        if (calculationLeapYear(year)) {
            System.out.println(year + " год является високосным");
        } else {
            System.out.println(year + " год не является високосным.");
        }
        //task 2
        int clientOS = 1;
        int clientDeviceYear = 2014;
        selectApplicationVersion(clientOS, clientDeviceYear);
        //task 3
        int deliveryDistance = 95;
        System.out.println("Потребуется дней: " + calculateDeliveryTime(deliveryDistance));
    }
}